version: "3.4"

services:

  # Automação do Fluxo de dados
  nifi:
    image: "apache/nifi"
    environment:
      NIFI_WEB_HTTP_PORT: 8080   
    ports: 
      - "8090:8080"
      - "8010:8010"
    volumes:
      - ./templates/:/opt/nifi/nifi-current/conf/templates/
    restart: always 

  producer_nifi:
    image: tonanuvem/producer_nifi
    container_name: producer_pedido
    ports:
    - "5001:5001"
    restart: always
    environment:
      - "HOST=kafka"
      - "PORTA=9092"
      - "TOPICO=NOVO_PEDIDO"
      - "WEBHOOK=inserir_webhook"
      - "CANAL=lab-testes"
    depends_on:
      - kafka

  zookeeper:
    image: "confluentinc/cp-zookeeper"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181    
    ports: 
      - "2181:2181"
    restart: always      

  kafka:
    image: "confluentinc/cp-kafka"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
      KAFKA_BROKER_ID: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1      
    ports: 
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: always      
  
  # Ferramenta CDC (Change Data Capture)
  connect:
    image: "debezium/connect"
    environment:
      GROUP_ID: 1
      REST_ADVERTISED_HOST_NAME: "connect"
      BOOTSTRAP_SERVERS: "kafka:9092"
      ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONFIG_STORAGE_TOPIC: "cdc_connect_configs"
      OFFSET_STORAGE_TOPIC: "cdc_connect_offsets" 
      STATUS_STORAGE_TOPIC: "cdc_connect_statuses"
    ports:
      - "8073:8083"
    depends_on:
      - zookeeper
      - kafka

  debeziumui:
    image: "debezium/debezium-ui"
    environment:
      KAFKA_CONNECT_URI: "http://connect:8073"
    ports:
      - "8074:8080"
    depends_on:
      - connect     

  # ferramenta visualização Kafka
  kowl:
    image: quay.io/cloudhut/kowl:v1.5.0
    restart: on-failure
    hostname: kowl
    ports:
    - "8070:8080"
    volumes:
    - ./kowl_config.yaml:/etc/kowl/config.yaml
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - kafka

  # PRODUTOS Microservice : exemplo Postgres
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    volumes:
      - "pgadmindata:/var/lib/pgadmin"
      - "../postgres_servers.json:/pgadmin4/servers.json"
    restart: unless-stopped
    depends_on: 
      - postgresdb
      
  postgresdb:
    image: debezium/postgres:13-alpine
    environment:
      POSTGRES_PASSWORD: admin
    volumes:
      - "postgresdata:/var/lib/postgresql/data"
      - "../postgres_init_database.sh:/docker-entrypoint-initdb.d/init-database.sh"

  # PAGAMENTO e PEDIDO Microservice : exemplo MongoDB : rodando 2 juntos só para facilitar o LAB
  mongoexpress:
    image: mongo-express
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on: 
      - mongo

  mongo:
    image: mongo:latest
    #image: debezium/example-mongodb #TODO: configurar replicaset
    environment:
      #PUID: 1000
      #PGID: 1000
      #MONGO_INITDB_ROOT_USERNAME: mongo
      #MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: pedidos
      MONGO_REPLICA_SET_NAME: rs0
    volumes:
      - mongodata:/data
      - "../mongo_order.json:/data/mongo_order.json"
    ports:
      - "27017:27017"
    #healthcheck: #TODO: configurar replicaset
    #  test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
    #  interval: 10s
    #  start_period: 30s
    #command: "mongod --replSet rs0"

  # USUARIOS Microservice : exemplo MySQL
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mysqldb
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      PMA_USER: admin
      PMA_PASSWORD: admin
    restart: always
    ports:
      - 8082:80  
    restart: unless-stopped
    depends_on: 
      - mysqldb
    
  mysqldb:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: usuarios
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    ports:
      - "3306:3306"
    volumes:
      - mysqldata:/var/lib/mysql
      - "../mysql_init_database.sql:/docker-entrypoint-initdb.d/init-database.sql"
      - "../mysql.cnf:/etc/mysql/conf.d/mysql.cnf"

  # Delivery (Logistica) Microservice : exemplo Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8083:8081"
    depends_on: 
      - redis

  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - redisdata:/data  

  # Reporting Microservice: relatórios usando o Elastic
  elasticsearch:
    image: elasticsearch:7.12.1
    container_name: elasticsearch
    environment:
      - "http.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "ES_JAVA_OPTS=-Xmx256m -Xms256m"
      - "ELASTIC_PASSWORD=changeme"
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - ./files:/usr/share/elasticsearch/files

  kibana:
    image: kibana:7.12.1
    container_name: kibana
    ports:
      - 5601:5601

    depends_on:
      - elasticsearch

  #beats:
  #  image: docker.elastic.co/beats/metricbeat:7.12.1
  #  command: metricbeat -e -system.hostfs=/hostfs -strict.perms=false
  #  container_name: beats
  #  user: root
  #  volumes:
  #    - ./metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml
  #    - /proc:/hostfs/proc:ro
  #    - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
  #    - /:/hostfs:ro
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  depends_on:
  #    - elasticsearch
  #    - kibana
      
volumes:
  pgadmindata:
  postgresdata:
  mongodata:
  mysqldata:
  redisdata:
  esdata:
